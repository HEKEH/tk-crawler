# 1. 基础网络配置
# Redis服务器监听端口
port 6379
# 允许所有IP访问（在Docker中使用）
bind 0.0.0.0
# 生产环境中如果不是Docker，建议设置具体IP

# 2. 认证配置
# 禁用默认用户
user default off
user ${REDIS_USERNAME} +@all ~* resetchannels allchannels on >${REDIS_PASSWORD}

# ~* 表示可以访问所有键
# ${REDIS_PASSWORD} 设置密码
# +@all 赋予所有命令权限

# 3. 持久化配置
# 数据文件存储目录
dir /data
# 启用AOF持久化
appendonly yes
# AOF文件名
appendfilename "appendonly.aof"
# AOF同步策略：
appendfsync everysec
# - no: 操作系统决定何时同步
# - always: 每次写入都同步（最安全，最慢）
# - everysec: 每秒同步（推荐，平衡性能和安全）

# 4. 内存配置
# 内存限制
maxmemory ${REDIS_MEMORY_LIMIT}
# 内存淘汰策略：
maxmemory-policy allkeys-lru
# - allkeys-lru: 对所有键使用LRU算法淘汰
# 其他选项：
# - volatile-lru: 只对设置了过期时间的键使用LRU
# - allkeys-random: 随机淘汰
# - volatile-random: 随机淘汰带过期时间的键
# - noeviction: 内存满时报错

# 5. 安全配置
# 禁用清空所有数据库的命令
rename-command FLUSHALL ""
# 禁用清空当前数据库的命令
rename-command FLUSHDB ""
# 禁用调试命令
rename-command DEBUG ""
# 将命令重命名为空字符串等同于禁用

# 6. 日志配置
# 日志级别
loglevel ${LOG_LEVEL}
# 日志文件路径
logfile /data/redis.log
# 在Docker环境中，放在/data目录便于持久化

# 7. 其他优化配置
# TCP keepalive时间（秒）
tcp-keepalive 300
# 检测死连接，避免资源浪费
# 300秒是比较好的平衡值
