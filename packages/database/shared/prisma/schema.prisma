datasource db {
  provider          = "mysql"
  url               = env("MYSQL_DATABASE_URL")
  shadowDatabaseUrl = env("MYSQL_DATABASE_SHADOW_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator client2 {
  provider = "prisma-client-js"
  output   = "../../node_modules/.prisma/client"
}

generator client3 {
  provider = "prisma-client-js"
  output   = "../../../biz-shared/node_modules/.prisma/client"
}

/// @TypeMapping: BigInt => String
model Anchor {
  user_id            BigInt              @id @db.UnsignedBigInt
  display_id         String              @unique @db.VarChar(24)
  room_id            BigInt              @db.UnsignedBigInt
  region             String              @db.Char(2)
  follower_count     Int                 @db.UnsignedInt
  audience_count     Int?                @db.UnsignedInt
  current_diamonds   Int                 @db.UnsignedInt
  last_diamonds      Int?                @db.UnsignedInt
  highest_diamonds   Int                 @db.UnsignedInt
  rank_league        String?             @db.Char(2)
  level              Int?                @db.UnsignedTinyInt
  has_commerce_goods Boolean?
  tag                String?             @db.VarChar(20)
  created_at         DateTime            @default(now()) @db.DateTime(3)
  updated_at         DateTime            @updatedAt @db.DateTime(3)
  inviteChecks       AnchorInviteCheck[]
  taskAssigns        TaskAssign[]
  anchorConnects     AnchorConnect[]

  @@index([region])
  @@index([follower_count])
  @@index([highest_diamonds])
  @@index([rank_league])
}

model LiveAdminUser {
  id                 BigInt              @id @default(autoincrement()) @db.UnsignedBigInt
  username           String              @unique @db.VarChar(50)
  password           String              @db.VarChar(128)
  org_id             BigInt              @db.UnsignedBigInt
  status             Int                 @db.UnsignedTinyInt
  max_query_per_hour Int                 @default(50) @db.UnsignedInt
  max_query_per_day  Int                 @default(280) @db.UnsignedInt
  cookie             String?             @db.Text
  is_cookie_valid    Boolean?
  created_at         DateTime            @default(now()) @db.DateTime(3)
  updated_at         DateTime            @updatedAt @db.DateTime(3)
  faction_id         Int?                @db.UnsignedInt
  area               String?             @db.VarChar(6)
  organization       Organization        @relation(fields: [org_id], references: [id], onDelete: Cascade)
  inviteChecks       AnchorInviteCheck[]

  @@index([org_id])
}

// 主播邀约验证数据表
model AnchorInviteCheck {
  id             BigInt        @id @default(autoincrement()) @db.UnsignedBigInt
  org_id         BigInt        @db.UnsignedBigInt
  anchor_id      BigInt        @db.UnsignedBigInt
  checked_at     DateTime      @db.DateTime(3)
  checked_by     BigInt        @db.UnsignedBigInt
  checked_result Int           @db.UnsignedTinyInt
  invite_type    Int
  created_at     DateTime      @default(now()) @db.DateTime(3)
  updated_at     DateTime      @updatedAt @db.DateTime(3)
  area           String        @db.VarChar(6)
  organization   Organization  @relation(fields: [org_id], references: [id], onDelete: Cascade)
  anchor         Anchor        @relation(fields: [anchor_id], references: [user_id], onDelete: Cascade)
  checkedByUser  LiveAdminUser @relation(fields: [checked_by], references: [id], onDelete: Cascade)

  @@unique([org_id, anchor_id], name: "org_id_anchor_id")
  @@index([org_id])
  @@index([checked_result])
  @@index([area])
}

// 机构表
model Organization {
  id                         BigInt                       @id @default(autoincrement()) @db.UnsignedBigInt
  name                       String                       @unique @db.VarChar(100)
  membership_start_at        DateTime?                    @db.DateTime(3)
  membership_expire_at       DateTime?                    @db.DateTime(3)
  status                     Int                          @db.UnsignedTinyInt
  remark                     String?                      @db.VarChar(200)
  created_at                 DateTime                     @default(now()) @db.DateTime(3)
  updated_at                 DateTime                     @updatedAt @db.DateTime(3)
  liveAdminUsers             LiveAdminUser[]
  orgUsers                   OrgUser[]
  // 公会分区
  areas                      OrgAreaRelation[]
  inviteChecks               AnchorInviteCheck[]
  taskAssigns                TaskAssign[]
  anchorConnects             AnchorConnect[]
  AnchorFollowGroup          AnchorFollowGroup[]
  AnchorFrom87               AnchorFrom87[]
  AnchorCommentTemplateGroup AnchorCommentTemplateGroup[]
  AnchorCommentTemplate      AnchorCommentTemplate[]
}

// 机构用户表
model OrgUser {
  id           BigInt       @id @default(autoincrement()) @db.UnsignedBigInt
  org_id       BigInt       @db.UnsignedBigInt
  username     String       @unique @db.VarChar(24)
  display_name String       @db.VarChar(24)
  password     String       @db.VarChar(128)
  email        String?      @unique @db.VarChar(50)
  mobile       String?      @unique @db.VarChar(20)
  role_id      Int          @db.UnsignedInt
  status       Int          @db.UnsignedTinyInt
  created_at   DateTime     @default(now()) @db.DateTime(3)
  updated_at   DateTime     @updatedAt @db.DateTime(3)
  organization Organization @relation(fields: [org_id], references: [id], onDelete: Cascade)
  taskAssigns  TaskAssign[]

  @@index([org_id])
}

model OrgAreaRelation {
  id     BigInt       @id @default(autoincrement()) @db.UnsignedBigInt
  org_id BigInt       @db.UnsignedBigInt
  area   String       @db.VarChar(6)
  org    Organization @relation(fields: [org_id], references: [id], onDelete: Cascade)

  @@unique([org_id, area], name: "org_id_area")
  @@index([org_id])
  @@index([area])
}

// 任务分配表
model TaskAssign {
  id           BigInt       @id @default(autoincrement()) @db.UnsignedBigInt
  org_id       BigInt       @db.UnsignedBigInt
  anchor_id    BigInt       @db.UnsignedBigInt
  org_user_id  BigInt       @db.UnsignedBigInt
  created_at   DateTime     @default(now()) @db.DateTime(3)
  updated_at   DateTime     @updatedAt @db.DateTime(3)
  organization Organization @relation(fields: [org_id], references: [id], onDelete: Cascade)
  anchor       Anchor       @relation(fields: [anchor_id], references: [user_id], onDelete: Cascade)
  orgUser      OrgUser      @relation(fields: [org_user_id], references: [id], onDelete: Cascade)

  @@unique([org_id, anchor_id], name: "org_id_anchor_id")
  @@index([org_id])
  @@index([org_user_id])
}

// 已建联状态表
model AnchorConnect {
  id           BigInt       @id @default(autoincrement()) @db.UnsignedBigInt
  org_id       BigInt       @db.UnsignedBigInt
  anchor_id    BigInt       @db.UnsignedBigInt
  created_at   DateTime     @default(now()) @db.DateTime(3)
  updated_at   DateTime     @updatedAt @db.DateTime(3)
  organization Organization @relation(fields: [org_id], references: [id], onDelete: Cascade)
  anchor       Anchor       @relation(fields: [anchor_id], references: [user_id], onDelete: Cascade)

  @@index([org_id])
  @@index([anchor_id])
}

// 下面是临时表

model AnchorFrom87 {
  id         BigInt @id @default(autoincrement()) @db.UnsignedBigInt
  org_id     BigInt @db.UnsignedBigInt
  account_id BigInt @db.UnsignedBigInt
  account    String @db.VarChar(30)

  // 钻石相关
  day_diamond_val      Int @default(0)
  last_day_diamond_val Int @default(0)
  his_max_diamond_val  Int @default(0)

  // 状态相关
  available        Int?    @db.UnsignedTinyInt
  available_reason String?
  status           Int?    @db.UnsignedTinyInt

  // 地区相关
  country      String? @db.VarChar(10)
  country_code String? @db.VarChar(2)

  // 其他信息
  follower_count         Int     @default(0)
  tag_title              String? @db.VarChar(10)
  canuse_invitation_type Int?    @db.UnsignedTinyInt // 3普通邀约，4金票邀约
  pieces                 String? @db.VarChar(3)

  created_at                DateTime                    @default(now())
  updated_at                DateTime                    @updatedAt
  AnchorFollowGroupRelation AnchorFollowGroupRelation[]
  organization              Organization?               @relation(fields: [org_id], references: [id], onDelete: Cascade)

  @@unique([org_id, account_id], name: "org_id_account_id")
  @@index([account])
  @@index([account_id])
  @@index([country_code])
  @@index([org_id])
}

model AnchorFollowGroup {
  id                        BigInt                      @id @default(autoincrement()) @db.UnsignedBigInt
  org_id                    BigInt                      @db.UnsignedBigInt
  name                      String                      @db.VarChar(30)
  created_at                DateTime                    @default(now())
  updated_at                DateTime                    @updatedAt
  organization              Organization?               @relation(fields: [org_id], references: [id], onDelete: Cascade)
  AnchorFollowGroupRelation AnchorFollowGroupRelation[]

  @@unique([org_id, name], name: "org_id_name")
  @@index([org_id])
}

model AnchorFollowGroupRelation {
  id              BigInt            @id @default(autoincrement())
  anchor_table_id BigInt            @db.UnsignedBigInt
  group_id        BigInt            @db.UnsignedBigInt
  created_at      DateTime          @default(now())
  updated_at      DateTime          @updatedAt
  group           AnchorFollowGroup @relation(fields: [group_id], references: [id], onDelete: Cascade)
  AnchorFrom87    AnchorFrom87      @relation(fields: [anchor_table_id], references: [id], onDelete: Cascade)

  @@unique([group_id, anchor_table_id], name: "group_id_anchor_table_id")
  @@index([anchor_table_id])
  @@index([group_id])
}

/**
 * 主播评论模板组
 */
model AnchorCommentTemplateGroup {
  id                    BigInt                  @id @default(autoincrement()) @db.UnsignedBigInt
  org_id                BigInt                  @db.UnsignedBigInt
  name                  String                  @db.VarChar(30)
  created_at            DateTime                @default(now())
  updated_at            DateTime                @updatedAt
  organization          Organization            @relation(fields: [org_id], references: [id], onDelete: Cascade)
  AnchorCommentTemplate AnchorCommentTemplate[]

  @@unique([org_id, name], name: "org_id_name")
  @@index([org_id])
}

/**
 * 主播评论模板
 */
model AnchorCommentTemplate {
  id           BigInt                     @id @default(autoincrement()) @db.UnsignedBigInt
  org_id       BigInt                     @db.UnsignedBigInt
  group_id     BigInt                     @db.UnsignedBigInt
  content      String                     @db.Text
  label        String?                    @db.VarChar(30)
  created_at   DateTime                   @default(now())
  updated_at   DateTime                   @updatedAt
  group        AnchorCommentTemplateGroup @relation(fields: [group_id], references: [id], onDelete: Cascade)
  organization Organization               @relation(fields: [org_id], references: [id], onDelete: Cascade)

  @@index([group_id])
  @@index([org_id])
}
